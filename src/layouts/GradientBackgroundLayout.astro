---
import Layout from "./Layout.astro";

export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<Layout title={title}>
    <main id="main" class="h-full w-full bg-slate-700 animated-gradient">
        <slot></slot>
    </main>
</Layout>

<style>
  .animated-gradient {
    animation: gradient 48s ease infinite;
  }

  @keyframes gradient {
    0% {
      background-position: 0% 0%;
    }
    25% {
      background-position: 0% 100%;
    }
    50% {
      background-position: 100% 100%;
    }
    75% {
      background-position: 100% 0%;
    }
    100% {
      background-position: 0% 0%;
    }
  }
</style>

<script is:inline>
  // Modified from https://www.foolishdeveloper.com/2021/10/random-gradient-generator.html
  const hexString = "0123456789abcdef";

  const generateRandomColorHex = () => {
    let hexCode = "#";
    for( i=0; i<6; i++){
        hexCode += hexString[Math.floor(Math.random() * hexString.length)];
    }
    return hexCode;
  }

  const generateRandomGradientLinear = (type, nbrColors) => {
    if (type !== 'linear' && type !== 'radial')
      throw "Gradient type must either be 'linear' or 'radial'!"

    let colors = [];
    for (let index = 0; index < nbrColors; index++) {
      colors.push(generateRandomColorHex())
    }

    let bgValue = `${type}-gradient(`;
    if (type === 'linear')
      bgValue += `${Math.floor(Math.random() * 360)}deg`;
    else
      bgValue += `circle`;

    colors.forEach(color => bgValue += `,${color}`);

    return bgValue + ')';
  }

  const tailOrHead = () => Math.random() < 0.5;

  const applyBackgroundToMain = (bg) => {
    const mainEl = document.getElementById('main');
    mainEl.style.background = bg;
    mainEl.style.backgroundSize = '300% 300%';
  }

  window.onload = () => applyBackgroundToMain(
    generateRandomGradientLinear(
      tailOrHead() ? 'linear' : 'radial',
      Math.floor(2 + Math.random() * 4)
    )
  );
</script>
